import React from "react";
import Button from "../elements/Button";
import { StoryContainer, StoryButtonContainer } from './utils';
export default { title: 'Elements/Button' };
export var Colors = function () { return (React.createElement(StoryContainer, null,
    React.createElement(StoryButtonContainer, null,
        React.createElement("h3", { className: "is-size-3 has-text-white" }, "is-primary"),
        React.createElement(Button, { primary: true }, "Primary")),
    React.createElement(StoryButtonContainer, null,
        React.createElement("h3", { className: "is-size-3 has-text-white" }, "is-link"),
        React.createElement(Button, { link: true }, "Link")),
    React.createElement(StoryButtonContainer, null,
        React.createElement("h3", { className: "is-size-3 has-text-white" }, "is-info"),
        React.createElement(Button, { info: true }, "Info")),
    React.createElement(StoryButtonContainer, null,
        React.createElement("h3", { className: "is-size-3 has-text-white" }, "is-success"),
        React.createElement(Button, { success: true }, "Success")),
    React.createElement(StoryButtonContainer, null,
        React.createElement("h3", { className: "is-size-3 has-text-white" }, "is-warning"),
        React.createElement(Button, { warning: true }, "Warning")),
    React.createElement(StoryButtonContainer, null,
        React.createElement("h3", { className: "is-size-3 has-text-white" }, "is-danger"),
        React.createElement(Button, { danger: true }, "Danger")),
    React.createElement(StoryButtonContainer, null,
        React.createElement("h3", { className: "is-size-3 has-text-white" }, "is-primary is-light"),
        React.createElement(Button, { primary: true, light: true }, "Primary")),
    React.createElement(StoryButtonContainer, null,
        React.createElement("h3", { className: "is-size-3 has-text-white" }, "is-link is-light"),
        React.createElement(Button, { link: true, light: true }, "Link")),
    React.createElement(StoryButtonContainer, null,
        React.createElement("h3", { className: "is-size-3 has-text-white" }, "is-info is-light"),
        React.createElement(Button, { info: true, light: true }, "Info")),
    React.createElement(StoryButtonContainer, null,
        React.createElement("h3", { className: "is-size-3 has-text-white" }, "is-success is-light"),
        React.createElement(Button, { success: true, light: true }, "Success")),
    React.createElement(StoryButtonContainer, null,
        React.createElement("h3", { className: "is-size-3 has-text-white" }, "is-warning is-light"),
        React.createElement(Button, { warning: true, light: true }, "Warning")),
    React.createElement(StoryButtonContainer, null,
        React.createElement("h3", { className: "is-size-3 has-text-white" }, "is-danger is-light"),
        React.createElement(Button, { danger: true, light: true }, "Danger")))); };
export var Sizes = function () { return (React.createElement(StoryContainer, null,
    React.createElement(StoryButtonContainer, null,
        React.createElement("h3", { className: "is-size-3 has-text-white" }, "is-small"),
        React.createElement(Button, { small: true }, "Small")),
    React.createElement(StoryButtonContainer, null,
        React.createElement("h3", { className: "is-size-3 has-text-white" }, "is-normal"),
        React.createElement(Button, { normal: true }, "Normal")),
    React.createElement(StoryButtonContainer, null,
        React.createElement("h3", { className: "is-size-3 has-text-white" }, "is-medium"),
        React.createElement(Button, { medium: true }, "Medium")),
    React.createElement(StoryButtonContainer, null,
        React.createElement("h3", { className: "is-size-3 has-text-white" }, "is-large"),
        React.createElement(Button, { large: true }, "Large")))); };
export var Rounded = function () { return (React.createElement(StoryContainer, null,
    React.createElement(StoryButtonContainer, null,
        React.createElement("h3", { className: "is-size-3 has-text-white" }, "is-primary"),
        React.createElement(Button, { primary: true, rounded: true }, "Button")),
    React.createElement(StoryButtonContainer, null,
        React.createElement("h3", { className: "is-size-3 has-text-white" }, "is-link"),
        React.createElement(Button, { link: true, rounded: true }, "Button")),
    React.createElement(StoryButtonContainer, null,
        React.createElement("h3", { className: "is-size-3 has-text-white" }, "is-info"),
        React.createElement(Button, { info: true, rounded: true }, "Button")),
    React.createElement(StoryButtonContainer, null,
        React.createElement("h3", { className: "is-size-3 has-text-white" }, "is-success"),
        React.createElement(Button, { success: true, rounded: true }, "Button")),
    React.createElement(StoryButtonContainer, null,
        React.createElement("h3", { className: "is-size-3 has-text-white" }, "is-warning"),
        React.createElement(Button, { warning: true, rounded: true }, "Button")),
    React.createElement(StoryButtonContainer, null,
        React.createElement("h3", { className: "is-size-3 has-text-white" }, "is-danger"),
        React.createElement(Button, { danger: true, rounded: true }, "Button")))); };
export var Outlined = function () { return (React.createElement(StoryContainer, null,
    React.createElement(StoryButtonContainer, null,
        React.createElement("h3", { className: "is-size-3 has-text-white" }, "is-outlined"),
        React.createElement(Button, { outlined: true }, "Button")),
    React.createElement(StoryButtonContainer, null,
        React.createElement("h3", { className: "is-size-3 has-text-white" }, "primary is-outlined"),
        React.createElement(Button, { primary: true, outlined: true }, "Button")),
    React.createElement(StoryButtonContainer, null,
        React.createElement("h3", { className: "is-size-3 has-text-white" }, "link is-outlined"),
        React.createElement(Button, { link: true, outlined: true }, "Button")),
    React.createElement(StoryButtonContainer, null,
        React.createElement("h3", { className: "is-size-3 has-text-white" }, "info is-outlined"),
        React.createElement(Button, { info: true, outlined: true }, "Button")),
    React.createElement(StoryButtonContainer, null,
        React.createElement("h3", { className: "is-size-3 has-text-white" }, "warning is-outlined"),
        React.createElement(Button, { warning: true, outlined: true }, "Button")),
    React.createElement(StoryButtonContainer, null,
        React.createElement("h3", { className: "is-size-3 has-text-white" }, "danger is-outlined"),
        React.createElement(Button, { danger: true, outlined: true }, "Button")))); };
export var Inverted = function () { return (React.createElement(StoryContainer, null,
    React.createElement(StoryButtonContainer, null,
        React.createElement("h3", { className: "is-size-3 has-text-white" }, "is-inverted"),
        React.createElement(Button, { inverted: true }, "Button")),
    React.createElement(StoryButtonContainer, null,
        React.createElement("h3", { className: "is-size-3 has-text-white" }, "primary is-inverted"),
        React.createElement(Button, { primary: true, inverted: true }, "Button")),
    React.createElement(StoryButtonContainer, null,
        React.createElement("h3", { className: "is-size-3 has-text-white" }, "link is-inverted"),
        React.createElement(Button, { link: true, inverted: true }, "Button")),
    React.createElement(StoryButtonContainer, null,
        React.createElement("h3", { className: "is-size-3 has-text-white" }, "info is-inverted"),
        React.createElement(Button, { info: true, inverted: true }, "Button")),
    React.createElement(StoryButtonContainer, null,
        React.createElement("h3", { className: "is-size-3 has-text-white" }, "success is-inverted"),
        React.createElement(Button, { success: true, inverted: true }, "Button")),
    React.createElement(StoryButtonContainer, null,
        React.createElement("h3", { className: "is-size-3 has-text-white" }, "danger is-inverted"),
        React.createElement(Button, { danger: true, inverted: true }, "Button")))); };
export var Loading = function () { return (React.createElement(StoryContainer, null,
    React.createElement(StoryButtonContainer, null,
        React.createElement("h3", { className: "is-size-3 has-text-white" }, "is-loading"),
        React.createElement(Button, { loading: true }, "Button")),
    React.createElement(StoryButtonContainer, null,
        React.createElement("h3", { className: "is-size-3 has-text-white" }, "primary is-loading"),
        React.createElement(Button, { primary: true, loading: true }, "Button")),
    React.createElement(StoryButtonContainer, null,
        React.createElement("h3", { className: "is-size-3 has-text-white" }, "link is-loading"),
        React.createElement(Button, { link: true, loading: true }, "Button")),
    React.createElement(StoryButtonContainer, null,
        React.createElement("h3", { className: "is-size-3 has-text-white" }, "info is-loading"),
        React.createElement(Button, { info: true, loading: true }, "Button")),
    React.createElement(StoryButtonContainer, null,
        React.createElement("h3", { className: "is-size-3 has-text-white" }, "success is-loading"),
        React.createElement(Button, { success: true, loading: true }, "Button")),
    React.createElement(StoryButtonContainer, null,
        React.createElement("h3", { className: "is-size-3 has-text-white" }, "warning is-loading"),
        React.createElement(Button, { warning: true, loading: true }, "Button")),
    React.createElement(StoryButtonContainer, null,
        React.createElement("h3", { className: "is-size-3 has-text-white" }, "danger is-loading"),
        React.createElement(Button, { danger: true, loading: true }, "Button")))); };
//# sourceMappingURL=button.stories.js.map